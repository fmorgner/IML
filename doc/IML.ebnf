(*
 * Copyright (c) 2017, Felix Morgner
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     * Neither the name of Felix Morgner nor the names of other
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

program                    = compound_command ;

compound_command           = command { command } ;

command                    = assignment_command
                           | conditional_command
                           | loop_command
                           | noop_command ;

noop_command               = "noop"
                           | string_literal ;

assignment_command         = simple_assignment
                           | multi_assignment ;

simple_assignment          = identifier "<-" expression ;

multi_assignment           = identifier_sequence "<-" expression_sequence ;

loop_command               = "while" boolean_expression "{" compound_command "}"
                           | "for" identifier "<-" arithmetic_expression "..." arithmetic_expression "{" compound_command "}" ;

conditional_command        = "if" boolean_expression "{" compound_command [ "}" "else" "{" compound_command ] "}" ;

identifier_sequence        = identifier "," identifier { "," identifier } ;

identifier                 = letter , { letter | digit };

letter                     = "a" | "b" | "c" | "d" | "e" | "f" | "g"
                           | "h" | "i" | "j" | "k" | "l" | "m" | "n"
                           | "o" | "p" | "q" | "r" | "s" | "t" | "u"
                           | "v" | "w" | "x" | "y" | "z" | "A" | "B"
                           | "C" | "D" | "E" | "F" | "G" | "H" | "I"
                           | "J" | "K" | "L" | "M" | "N" | "O" | "P"
                           | "Q" | "R" | "S" | "T" | "U" | "V" | "W"
                           | "X" | "Y" | "Z" ;

digit                      = "0" | "1" | "2" | "3" | "4" | "5" | "6"
                           | "7" | "8" | "9" ;

expression_sequence        = expression "," expression { "," expression } ;

expression                 = boolean_expression
                           | additive_expression
                           | literal_expression ;

literal_expression         = numeric_literal
                           | boolean_literal
                           | string_literal ;

numeric_literal            = { "-" } , digit , { digit } ;

boolean_literal            = "true"
                           | "false" ;

string_literal             = "'" digit | letter , { digit | letter } "'" ;

boolean_operand            = boolean_literal
                           | identifer
                           | "(" boolean_expression ")" ;

binary_boolean_operator    = "^" | "v" ;

unary_boolean_operator     = "!" ;

relational_operator        = "<" | "<=" | ">" | ">=" | "=" | "/=" ;

boolean_expression         = boolean_operand { binary_boolean_operator boolean_operand }
                           | additive_expression relational_operator additive_expression
                           | unary_boolean_operator boolean_operand ;

arithmetic_operand         = numeric_literal
                           | identifer ;

additive_operator          = "+" | "-" ;

multiplicative_operator    = "*" | "/" | "%" ;

additive_expression        = multiplicative_expression { additive_operator multiplicative_expression } ;

multiplicative_expression  = arithmetic_operand { multiplicative_operator arithmetic_operand } ;
